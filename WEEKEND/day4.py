# -*- coding: utf-8 -*-
"""DAY4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pa6jS2Q04OXPjfCRHZff9dhVpeJZBqfO
"""

import pandas as pd

# Sample DataFrame
data = {
    'A': [1, 2, None, 4],
    'B': [None, 2, 3, 4],
    'C': [1, 2, 3, 4]
}

df = pd.DataFrame(data)

# Count missing values per column
print(df.isnull().sum())

# Storing patient details
patient_name = "Muthu Kumar "
patient_age = 35
patient_weight_kg = 75
patient_height_m = 1.75

# Calculating BMI
patient_bmi = patient_weight_kg / (patient_height_m ** 2)

# Displaying patient details
print(f"Patient Name: {patient_name}")
print(f"Age: {patient_age} years")
print(f"BMI: {patient_bmi:.2f}")

import pandas as pd

# Sample DataFrame
data = {
    'A': [1, 2, None, 4],
    'B': [None, 2, 3, 4],
    'C': [1, 2, 3, 4]
}

df = pd.DataFrame(data)

# Remove rows with missing values
df_cleaned = df.dropna()

# Print the cleaned DataFrame
print(df_cleaned)

import pandas as pd

# Sample DataFrame with missing values
data = {
    'Age': [25, 30, None, 35, 40],
    'Marks': [88, None, 90, 85, 87],
    'Attendance': [95, None, 92, 88, 90]
}

df = pd.DataFrame(data)

# Fill missing values in 'Age' with the mean of the column
df["Age"].fillna(df["Age"].mean(), inplace=True)

# Fill missing values in 'Marks' with the median of the column
df["Marks"].fillna(df["Marks"].median(), inplace=True)

# Fill missing values in 'Attendance' with the mean of the column
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True)

# Print the DataFrame after filling missing values
print(df)

import pandas as pd

# Sample DataFrame with missing values
data = {
    'Passed': ['Yes', 'No', 'Yes', 'Yes', None, 'No', None]
}

df = pd.DataFrame(data)

# Fill missing values in 'Passed' column with the mode
df["Passed"].fillna(df["Passed"].mode()[0], inplace=True)

# Print the DataFrame after filling missing values
print(df)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()  # Initialize the scaler
df_scaled = df.copy()  # Create a copy of df to store scaled values
df_scaled[["Marks", "Attendance"]] = scaler.fit_transform(df[["Marks", "Attendance"]])  # Scale selected columns

print(df_scaled)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()  # Initialize MinMaxScaler
df_scaled = df.copy()  # Create a copy of df to store scaled values
df_scaled[["Marks", "Attendance"]] = scaler.fit_transform(df[["Marks", "Attendance"]])  # Apply MinMax scaling
print(df_scaled)

df_encoded = pd.get_dummies(df, columns=["Passed"], drop_first=True)
print(df_encoded)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df["Passed"] = encoder.fit_transform(df["Passed"])
print(df)



def performance_category(marks):
    if marks >= 85:
        return "High"
    elif marks >= 70:
        return "Medium"
    else:
        return "Low"
df["Performance"] = df["Marks"].apply(performance_category)
print(df)

import pandas as pd

df["Age_Group"] = pd.cut(df["Age"], bins=[18, 21, 24], labels=["Young", "Adult"], right=False)
print(df)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = df.copy()
df_scaled[["Marks", "Attendance"]] = scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

#Function to determine BMI category
def determine_bmi_category(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 24.9:
        return "Normal weight"
    elif 25 <= bmi < 29.9:
        return "Overweight"
    else:
        return "Obese"

# Patient details
patient_name = "John Doe"
patient_age = 45
patient_bmi = 28.5

# Determine BMI category
bmi_category = determine_bmi_category(patient_bmi)

# Print the patient details along with BMI category
print(f"Patient Name: {patient_name}")
print(f"Patient Age: {patient_age}")
print(f"Patient BMI: {patient_bmi}")
print(f"BMI Category: {bmi_category}")

import numpy as np

# Store a week's heart rate readings in a NumPy array (e.g., 7 readings, one for each day)
heart_rate_readings = np.array([72, 75, 68, 70, 74, 78, 69])

# Calculate the average, highest, and lowest heart rate
average_heart_rate = np.mean(heart_rate_readings)
highest_heart_rate = np.max(heart_rate_readings)
lowest_heart_rate = np.min(heart_rate_readings)

# Print the results
print("Average Heart Rate:", average_heart_rate)
print("Highest Heart Rate:", highest_heart_rate)
print("Lowest Heart Rate:", lowest_heart_rate)

import pandas as pd

# Creating the DataFrame
data = {
    "Name": ["Alice", "Bob", "Charlie", "David", "Emma"],
    "Age": [45, 50, 38, 60, 55],
    "Cholesterol": [200, 220, 180, 250, 230]
}

df = pd.DataFrame(data)

# Display the DataFrame
print(df)

import pandas as pd

# Sample patient data
data = {
    'Patient_ID': [1, 2, 3, 4, 5],
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Cholesterol': [180, 220, 190, 250, 210]
}

# Create DataFrame
df = pd.DataFrame(data)

# Set cholesterol threshold
threshold = 200

# Filter patients above the threshold
high_cholesterol_patients = df[df['Cholesterol'] > threshold]

# Display results
print(high_cholesterol_patients)

# Sample patient data: (Name, Weight in kg, Height in meters)
patients = [
    ("Alice", 68, 1.65),
    ("Bob", 85, 1.75),
    ("Charlie", 95, 1.80),
    ("David", 76, 1.70)
]

# Function to calculate BMI
def calculate_bmi(weight, height):
    return weight / (height ** 2)

# Add BMI to patient data
patients_with_bmi = [(name, weight, height, calculate_bmi(weight, height)) for name, weight, height in patients]

# Sort patients by BMI in descending order
sorted_patients = sorted(patients_with_bmi, key=lambda x: x[3], reverse=True)

# Print results
print("Patients sorted by BMI (highest to lowest):")
for patient in sorted_patients:
    print(f"{patient[0]} - BMI: {patient[3]:.2f}")

import pandas as pd

# Example DataFrame
data = {'Patient_ID': [1, 2, 3, 4, 5],
        'BMI': [22, 27, 31, 24, 29],
        'Cholesterol': [180, 220, 250, 190, 240]}

df = pd.DataFrame(data)

# Function to classify risk
def classify_risk(row):
    if row['BMI'] >= 30 or row['Cholesterol'] >= 240:
        return "High"
    elif row['BMI'] >= 25 or row['Cholesterol'] >= 200:
        return "Medium"
    else:
        return "Low"

# Apply classification
df['Risk_Level'] = df.apply(classify_risk, axis=1)

print(df)

